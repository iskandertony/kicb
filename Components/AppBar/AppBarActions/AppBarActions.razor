@using Microsoft.AspNetCore.Components
@using Toolbelt.Blazor.I18nText
@inject I18nText I18n
@inject IJSRuntime JS

<div class="main-appbar-nav">
    <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.NotificationsNone" Class="notif-btn" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem Disabled="true" Style="opacity:0.7;">
                <MudText Typo="Typo.subtitle2" Align="Align.Center">
                    <MudIcon Icon="@Icons.Material.Filled.NotificationsOff" Size="Size.Medium"
                        Style="margin-right: 8px;" />
                    @Resources?.Hello
                </MudText>
            </MudMenuItem>
        </ChildContent>
    </MudMenu>

    <MudText Typo="Typo.subtitle2" Align="Align.Center">
        üåê @Resources?.TestPhrase
    </MudText>

    <LanguageSwitcher />

    <MudIconButton Size="Size.Large"
        Icon="@(IsDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Class="theme-btn"
        OnClick="OnThemeToggleClick" Title="@(IsDarkMode ? "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞" : "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")" />

    <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.AccountCircle" Class="profile-btn" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem>–ü—Ä–æ—Ñ–∏–ª—å</MudMenuItem>
            <MudMenuItem>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</MudMenuItem>
            <MudMenuItem>–í—ã–π—Ç–∏</MudMenuItem>
        </ChildContent>
    </MudMenu>
</div>

@code {
    [Parameter] public bool IsDarkMode { get; set; }
    [Parameter] public EventCallback OnThemeToggle { get; set; }

    private MyResources? Resources;

    protected override async Task OnInitializedAsync()
    {
        Resources = await I18n.GetTextTableAsync<MyResources>(this);
    }
    private async Task OnThemeToggleClick()
    {
        if (OnThemeToggle.HasDelegate)
            await OnThemeToggle.InvokeAsync();
    }
}
